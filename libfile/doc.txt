la libfile est une bibliothèque très simple d'intéraction avec les fichiers écrite par
Mathias Couriol.

Elle a pour but de simplifier l'écriture dans les fichiers aux étudiants
de première année.
Elle utilise les bibliothèque de bas niveau pour ceci, à savoir
fcntl.h, unistd.h, stdlib.h

Pour l'utiliser il suffit d'inclure libfile.h au début de votre code comme ceci:
#include "libfile.h"
Si vous êtes sous windows utilisez libfileWin.h et libfileWin.c qui possèdent les mêmes fonctions
mais sous windows.
et de compiler le fichier /libfile/main.c avec votre code à vous.

Un nouveau type de variable existe alors, le type file;

Pour ouvrir un fichier il faut utiliser les fonctions
fi_openRFile(), fi_openWFile() ou fi_openRWFile() pour avoir les droits respectivement
de lecture, d'écriture, et les deux. Si le fichier n'existe pas à l'appel de ces fonctions
il sera créé avec les droits rwxr-xr--
Chaque fichier ouvert doit être fermé avec la fonction fi_closeFile()
A l'ouverture d'un fichier grâce aux fonctions fi_openRFile() etc... un curseur sera créé
dans le fichier. Ce curseur représente la position dans le fichier, on lit et écrit
à partir du curseur. Pour connaître la position du curseur on peut utiliser fi_getCursor()
Pour le déplacer on peut utiliser fi_moveCursor() et fi_setCursor() pour le déplacer et le set.

Pour connaître la taille du fichier il est possible de faire fi_len()
Il est possible de lire une ligne en partant du curseur avec fi_readLine() ou de lire le
fichier entier avec fi_readFile().
Il est possible d'écrire dans le ficher également, pour écrire en écrasant complètement 
l'ancien fichier en utilisant fi_writeFile(), il est possible d'écrire à partir du curseur
avec fi_writeLine(). Il est également possible d'écrire à la toute fin du fichier avec
fi_appendFile().

file fi_openRFile(char *path);
fi_openRFile et ses voisines fi_openRWFile et fi_openWFile prennent toutes en paramètre une
chaine de caractères à savoir le nom du fichier à ouvrir. Si le fichier n'existe pas il
est créé avec les droits rwxr-xr--
La fonction renvoie un type file qui est un entier positif. Si le type de retour est négatif
il y a eu une erreur dans l'ouverture du fichier (ou de votre part, par exemple nom incorrect).

int fi_len(file fd);
fi_len renvoie la taille du fichier si ce dernier est ouvert en lecture. 

char *fi_readFile(file fd);
fi_readFile et fi_readLine lisent le texe contenu dans le fichier. fi_readFile lit
l'intégralité du fichier là ou fi_readLine lit uniquement en partant du curseur jusqu'au
prochain retour chariot ou fin du fichier. Les fonctions font avancer le curseur jusqu'à
la fin de leur lecture. La chaîne retournée peut être utilisée sans problème après,
cependnant lorsque son utilisation est finie il FAUT utiliser free() dessus.
par exemple free(maChaine);
le curseur est placé à la fin du fichier après l'execution.

int fi_moveCursor(file fd);
fi_moveCursor, fi_setCursor et fi_getCursor gèrent la position du curseur pour respectivement
la déplacer à partir de sa position actuelle, la set à une position absolue ou renvoyer
sa position. Toutes ces fonctions renvoient sa position finale après déplacement s'il y a.
Si sa position est à -1 il y a eu une erreur (le set après la fi de fichier par exemple)

int fi_writeFile(char *name, char *text);
fi_writeFile efface tout le contenu du fchier spécifié afin de réécrire le contenu donné 
en paramètre. fi_writeFile prends en paramètre le nom du fichier non pas un fd et va bypasser
les droits de votre ouverture. Si vous avez ouvert le fichier en lecture mais appelez 
fi_writeFile, elle fonctionnera quand même. Faites attention en l'utilisant.
elle renvoie le nombre de caractères écrits dans le fichier. Le curseur est placé à la fin du
fichier à la fin de l'execution.

int fi_writeLine(file fd, char *text);
fi_writeLine et fi_appendFile écrivent respectivement à la position du curseur et à la fin
du fichier, le texte passé en paramètre.
fi_writeLine écrasera chaque caractère qu'elle écrit à partir du curseur attention à ça.
les deux renvoient le nombre de caractères écrits dans le fichier. le curseur à la fin
est placé à la fin de ce qu'elles ont écrit.